**PIZZA SALES ANALYSIS**
Performed data analysis on pizza sales data to derive valuable insights from a dataset containing over 48,000 records.

**Project Overview:**
- Analyzed sales data from the 'pizza_sales_csv.csv' dataset.
- Explored sales records with attributes including pizza_id, order_id, pizza_name, quantity, order_date, order_time, unit_price, total_price, pizza_size, pizza_category, pizza_ingredients, and pizza_name.
- Implemented SQL queries to extract meaningful information and draw conclusions from the dataset.

**Key Findings and SQL Queries:**

1. **Total Sales Analysis**
   - Calculated the total sales for each order and the total revenue generated on each order date.
   - SQL Query:
     ```sql
     SELECT order_date, SUM(total_price) AS per_day_sales FROM pizza_orders GROUP BY order_date ORDER BY per_day_sales DESC;
     ```

2. **Most Popular Pizza**
   - Determined the most popular pizza by counting the total quantity ordered for each pizza_name.
   - SQL Query:
     ```sql
     SELECT pizza_name, SUM(quantity) AS pizza_per_quantity FROM pizza_orders GROUP BY pizza_name ORDER BY pizza_per_quantity DESC LIMIT 1;
     ```

3. **Average Unit Price by Pizza Size**
   - Calculated the average unit price of pizzas for each pizza size (S, M, L) to identify size-specific pricing trends.
   - SQL Query:
     ```sql
     SELECT pizza_size, ROUND(AVG(unit_price), 2) AS avg_unit_price_per_size FROM pizza_orders GROUP BY pizza_size ORDER BY avg_unit_price_per_size DESC;
     ```

4. **Pizza Category Breakdown**
   - Analyzed the total revenue generated by each pizza category (Classic, Veggie, Chicken, Supreme) to determine the most profitable category.
   - SQL Query:
     ```sql
     SELECT pizza_category, SUM(total_price) AS per_day_sales FROM pizza_orders GROUP BY pizza_category ORDER BY per_day_sales DESC;
     ```

5. **Top Ingredients**
   - Identified the top 5 most commonly used ingredients in all pizzas.
   - SQL Query:
     ```sql
     SELECT pizza_ingredients, COUNT(*) AS ingredient_count FROM pizza_orders GROUP BY pizza_ingredients ORDER BY ingredient_count DESC LIMIT 5;
     ```

6. **Order Time Analysis**
   - Analyzed the distribution of orders by time of day (order_time) to identify peak ordering times.
   - SQL Query:
     ```sql
     SELECT SUBSTR(order_time, 0, 3) AS hour, COUNT(*) FROM pizza_orders GROUP BY hour ORDER BY hour DESC;
     ```

7. **Largest Order**
   - Identified the order with the highest total price and the pizzas included in this order.
   - SQL Query:
     ```sql
     SELECT order_id, MAX(total_price) AS max_price FROM pizza_orders GROUP BY order_id ORDER BY max_price DESC LIMIT 1;
     ```

8. **Average Price by Pizza Name**
   - Calculated the average price for each pizza_name and identified any significant price differences between different pizzas.
   - SQL Query:
     ```sql
     SELECT pizza_name, ROUND(AVG(total_price), 2) AS avg_price FROM pizza_orders GROUP BY pizza_name ORDER BY avg_price DESC;
     ```

9. **Order Frequency Analysis**
   - Calculated the number of orders placed on each order date to identify trends and patterns in order frequency.
   - SQL Query:
     ```sql
     SELECT order_date, COUNT(order_id) AS orders_per_day FROM pizza_orders GROUP BY order_date ORDER BY orders_per_day DESC;
     ```

10. **Pizza Size and Category Correlation**
    - Determined if there is a correlation between pizza size and pizza category and identified categories commonly associated with specific sizes.
    - SQL Query:
      ```sql
      SELECT pizza_size, pizza_category, COUNT(*) AS pizza_count FROM pizza_orders GROUP BY pizza_size, pizza_category;
      ```

11. **Revenue Growth Over Time**
    - Calculated monthly revenue over time to identify any noticeable growth or decline in revenue.
    - SQL Query:
      ```sql
      SELECT EXTRACT(MONTH FROM order_date) AS month, SUM(total_price) AS total_sale_by_month FROM pizza_orders GROUP BY month ORDER BY total_sale_by_month DESC;
      ```

12. **Specialty Pizza Comparison**
    - Compared the average price of specialty pizzas to classic pizzas to determine if specialty pizzas are priced differently.
    - SQL Query:
      ```sql
      SELECT pizza_category, AVG(total_price) AS avg_price FROM pizza_orders WHERE pizza_category IN ('Classic', 'Supreme') GROUP BY pizza_category;
      ```

13. **Repeat Customers**
    - Identified repeat customers, calculated the number of repeat orders, and determined their total spending.
    - SQL Query:
      ```sql
      SELECT order_id, COUNT(*) AS order_count, SUM(total_price) AS total_spending FROM pizza_orders GROUP BY order_id HAVING order_count > 1 ORDER BY total_spending DESC;
      ```

For a more detailed review of the project, including SQL code and results, please refer to my GitHub repository [Link to Your Repository].

This project demonstrates my proficiency in SQL data analysis, data manipulation, and problem-solving abilities.
